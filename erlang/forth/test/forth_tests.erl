%% Based on canonical data version 1.7.0
%% https://github.com/exercism/problem-specifications/raw/master/exercises/forth/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(forth_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").




'1_numbers_just_get_pushed_onto_the_stack_test'() ->
    ?assertEqual([1, 2, 3, 4, 5],
		 forth:evaluate(["1 2 3 4 5"])).

'2_can_add_two_numbers_test'() ->
    ?assertEqual([3], forth:evaluate(["1 2 +"])).

'3_errors_if_there_is_nothing_on_the_stack_test'() ->
    ?assertError(_, forth:evaluate(["+"])).

'4_errors_if_there_is_only_one_value_on_the_stack_test'() ->
    ?assertError(_, forth:evaluate(["1 +"])).

'5_can_subtract_two_numbers_test'() ->
    ?assertEqual([-1], forth:evaluate(["3 4 -"])).

'6_errors_if_there_is_nothing_on_the_stack_test'() ->
    ?assertError(_, forth:evaluate(["-"])).

'7_errors_if_there_is_only_one_value_on_the_stack_test'() ->
    ?assertError(_, forth:evaluate(["1 -"])).

'8_can_multiply_two_numbers_test'() ->
    ?assertEqual("\b", forth:evaluate(["2 4 *"])).

'9_errors_if_there_is_nothing_on_the_stack_test'() ->
    ?assertError(_, forth:evaluate(["*"])).

'10_errors_if_there_is_only_one_value_on_the_stack_test'() ->
    ?assertError(_, forth:evaluate(["1 *"])).

'11_can_divide_two_numbers_test'() ->
    ?assertEqual([4], forth:evaluate(["12 3 /"])).

'12_performs_integer_division_test'() ->
    ?assertEqual([2], forth:evaluate(["8 3 /"])).

'13_errors_if_dividing_by_zero_test'() ->
    ?assertError(_, forth:evaluate(["4 0 /"])).

'14_errors_if_there_is_nothing_on_the_stack_test'() ->
    ?assertError(_, forth:evaluate(["/"])).

'15_errors_if_there_is_only_one_value_on_the_stack_test'() ->
    ?assertError(_, forth:evaluate(["1 /"])).

'16_addition_and_subtraction_test'() ->
    ?assertEqual([-1], forth:evaluate(["1 2 + 4 -"])).

'17_multiplication_and_division_test'() ->
    ?assertEqual([2], forth:evaluate(["2 4 * 3 /"])).

'18_copies_a_value_on_the_stack_test'() ->
    ?assertEqual([1, 1], forth:evaluate(["1 dup"])).

'19_copies_the_top_value_on_the_stack_test'() ->
    ?assertEqual([1, 2, 2], forth:evaluate(["1 2 dup"])).

'20_errors_if_there_is_nothing_on_the_stack_test'() ->
    ?assertError(_, forth:evaluate(["dup"])).

'21_removes_the_top_value_on_the_stack_if_it_is_the_only_one_test'() ->
    ?assertEqual([], forth:evaluate(["1 drop"])).

'22_removes_the_top_value_on_the_stack_if_it_is_not_the_only_one_test'() ->
    ?assertEqual([1], forth:evaluate(["1 2 drop"])).

'23_errors_if_there_is_nothing_on_the_stack_test'() ->
    ?assertError(_, forth:evaluate(["drop"])).

'24_swaps_the_top_two_values_on_the_stack_if_they_are_the_only_ones_test'() ->
    ?assertEqual([2, 1], forth:evaluate(["1 2 swap"])).

'25_swaps_the_top_two_values_on_the_stack_if_they_are_not_the_only_ones_test'() ->
    ?assertEqual([1, 3, 2], forth:evaluate(["1 2 3 swap"])).

'26_errors_if_there_is_nothing_on_the_stack_test'() ->
    ?assertError(_, forth:evaluate(["swap"])).

'27_errors_if_there_is_only_one_value_on_the_stack_test'() ->
    ?assertError(_, forth:evaluate(["1 swap"])).

'28_copies_the_second_element_if_there_are_only_two_test'() ->
    ?assertEqual([1, 2, 1], forth:evaluate(["1 2 over"])).

'29_copies_the_second_element_if_there_are_more_than_two_test'() ->
    ?assertEqual([1, 2, 3, 2],
		 forth:evaluate(["1 2 3 over"])).

'30_errors_if_there_is_nothing_on_the_stack_test'() ->
    ?assertError(_, forth:evaluate(["over"])).

'31_errors_if_there_is_only_one_value_on_the_stack_test'() ->
    ?assertError(_, forth:evaluate(["1 over"])).

'32_can_consist_of_built_in_words_test'() ->
    ?assertEqual([1, 1, 1],
		 forth:evaluate([": dup-twice dup dup ;",
				 "1 dup-twice"])).

'33_execute_in_the_right_order_test'() ->
    ?assertEqual([1, 2, 3],
		 forth:evaluate([": countup 1 2 3 ;", "countup"])).

'34_can_override_other_user_defined_words_test'() ->
    ?assertEqual([1, 1, 1],
		 forth:evaluate([": foo dup ;", ": foo dup dup ;",
				 "1 foo"])).

'35_can_override_built_in_words_test'() ->
    ?assertEqual([1, 1],
		 forth:evaluate([": swap dup ;", "1 swap"])).

'36_can_override_built_in_operators_test'() ->
    ?assertEqual("\f",
		 forth:evaluate([": + * ;", "3 4 +"])).

'37_can_use_different_words_with_the_same_name_test'() ->
    ?assertEqual([5, 6],
		 forth:evaluate([": foo 5 ;", ": bar foo ;", ": foo 6 ;",
				 "bar foo"])).

'38_can_define_word_that_uses_word_with_the_same_name_test'() ->
    ?assertEqual("\v",
		 forth:evaluate([": foo 10 ;", ": foo foo 1 + ;",
				 "foo"])).

'39_cannot_redefine_numbers_test'() ->
    ?assertError(_, forth:evaluate([": 1 2 ;"])).

'40_errors_if_executing_a_non_existent_word_test'() ->
    ?assertError(_, forth:evaluate(["foo"])).

'41_dup_is_case_insensitive_test'() ->
    ?assertEqual([1, 1, 1, 1],
		 forth:evaluate(["1 DUP Dup dup"])).

'42_drop_is_case_insensitive_test'() ->
    ?assertEqual([1],
		 forth:evaluate(["1 2 3 4 DROP Drop drop"])).

'43_swap_is_case_insensitive_test'() ->
    ?assertEqual([2, 3, 4, 1],
		 forth:evaluate(["1 2 SWAP 3 Swap 4 swap"])).

'44_over_is_case_insensitive_test'() ->
    ?assertEqual([1, 2, 1, 2, 1],
		 forth:evaluate(["1 2 OVER Over over"])).

'45_user_defined_words_are_case_insensitive_test'() ->
    ?assertEqual([1, 1, 1, 1],
		 forth:evaluate([": foo dup ;", "1 FOO Foo foo"])).

'46_definitions_are_case_insensitive_test'() ->
    ?assertEqual([1, 1, 1, 1],
		 forth:evaluate([": SWAP DUP Dup dup ;", "1 swap"])).
